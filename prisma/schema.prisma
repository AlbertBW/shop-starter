// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Product {
    id              Int              @id @default(autoincrement())
    name            String
    description     String
    slug            String           @unique
    sku             String           @unique
    price           Int
    salePrice       Int?
    salePriceStart  DateTime?
    salePriceEnd    DateTime?
    currency        String
    stock           Int
    sold            Int
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    category        Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    ProductVariants ProductVariant[]
    ProductImages   ProductImage[]
    OrderItem       OrderItem[]
    categoryId      Int?
    CartItem        CartItem[]

    @@index([slug])
}

model ProductVariant {
    id             Int       @id @default(autoincrement())
    name           String
    sku            String    @unique
    price          Int
    salePrice      Int?
    salePriceStart DateTime?
    salePriceEnd   DateTime?
    currency       String
    stock          Int
    sold           Int
    productId      Int
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
    CartItem  CartItem[]
    OrderItem OrderItem[]

    @@index([name])
}

model ProductImage {
    id        Int      @id @default(autoincrement())
    imageUrl  String
    altText   String
    productId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([imageUrl])
}

model Category {
    id        Int       @id @default(autoincrement())
    name      String
    slug      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Product   Product[]

    @@index([name])
}

model Order {
    id                Int             @id @default(autoincrement())
    orderNumber       String          @unique
    userId            String?
    sessionId         String?
    email             String
    shippingMethod    ShippingMethod
    shippingCost      Int
    total             Int
    currency          String
    status            OrderStatus
    paymentStatus     PaymentStatus
    paymentIntentId   String?
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
    OrderItem         OrderItem[]
    shippingAddressId Int
    ShippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])

    @@index([email])
    @@index([shippingAddressId])
}

enum ShippingMethod {
    standard
    express
}

enum OrderStatus {
    pending
    processing
    shipped
    delivered
    cancelled
}

enum PaymentStatus {
    pending
    completed
    failed
}

model ShippingAddress {
    id           Int      @id @default(autoincrement())
    userId       String?
    name         String
    email        String
    phone        String
    addressLine1 String
    addressLine2 String?
    city         String
    county       String
    country      String
    postcode     String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    Order        Order[]

    @@index([email])
}

model OrderItem {
    id        Int      @id @default(autoincrement())
    orderId   Int
    productId Int
    variantId Int?
    quantity  Int
    price     Int
    currency  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product Product         @relation(fields: [productId], references: [id], onDelete: NoAction)
    variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: NoAction)

    @@index([orderId])
}

model Cart {
    id         Int        @id @default(autoincrement())
    userId     String?
    sessionId  String?
    status     String     @default("active") // active, abandoned
    couponCode String?
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    items      CartItem[]

    @@index([userId])
    @@index([sessionId])
}

model CartItem {
    id        Int      @id @default(autoincrement())
    cartId    Int
    productId Int
    variantId Int?
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    cart    Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
    variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

    @@index([cartId])
}
